# Dockerfile for LobeChat Next.js Application (Server Focused)

# ---- Base Stage ----
# Use an official Node.js runtime as a parent image
FROM node:20-alpine AS base
# Install necessary dependencies for runtime and native modules
# openssl for node crypto, libc6-compat for alpine compatibility
RUN apk add --no-cache libc6-compat openssl curl
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

# Prepare a minimal runtime environment in /distroless for the final stage
RUN mkdir -p /distroless/bin /distroless/etc /distroless/etc/ssl/certs /distroless/lib
# Copy essential libraries and node binary
RUN cp /usr/lib/libstdc++.so.6 /distroless/lib/libstdc++.so.6 \
    && cp /usr/lib/libgcc_s.so.1 /distroless/lib/libgcc_s.so.1 \
    && cp /usr/local/bin/node /distroless/bin/node \
    && cp /etc/ssl/certs/ca-certificates.crt /distroless/etc/ssl/certs/ca-certificates.crt

# ---- Dependencies Stage ----
FROM base AS deps
WORKDIR /app
# Copy dependency definition files
COPY package.json pnpm-lock.yaml ./
# Install dependencies including devDependencies needed for build
RUN pnpm install --frozen-lockfile --prod=false

# ---- Builder Stage ----
FROM base AS builder
WORKDIR /app
# Copy dependencies from the previous stage
COPY --from=deps /app/node_modules ./node_modules
# Copy the entire source code
COPY . .

# Build the Next.js application using the specific docker build script
# This likely generates the standalone output
# Pass build-time args if needed: --build-arg NEXT_PUBLIC_MY_VAR=value
# ARG NEXT_PUBLIC_MY_VAR
# ENV NEXT_PUBLIC_MY_VAR=$NEXT_PUBLIC_MY_VAR
RUN pnpm run build:docker

# ---- Application Stage ----
# Prepare the final application structure using a small image like busybox
# to copy artifacts before moving to scratch
FROM busybox:latest AS app
WORKDIR /app

# Copy standalone output from builder
COPY --from=builder /app/.next/standalone ./

# Copy database migrations and necessary scripts
COPY --from=builder /app/src/database/migrations ./migrations
COPY --from=builder /app/scripts/migrateServerDB/docker.cjs ./docker.cjs
COPY --from=builder /app/scripts/migrateServerDB/errorHint.js ./errorHint.js

# Copy server launcher script
COPY --from=builder /app/scripts/serverLauncher/startServer.js ./startServer.js

# Copy necessary node_modules for running the standalone server if required
# (Often standalone includes necessary node_modules, verify if this COPY is needed)
# COPY --from=builder /app/.next/standalone/node_modules ./node_modules

# Ensure permissions are correct for the next stage
RUN chown -R 1001:1001 /app

# ---- Runner Stage (Final Image) ----
# Use scratch for a minimal image
FROM scratch

# Copy the minimal runtime environment prepared in the base stage
COPY --from=base /distroless /

# Copy application files from the app stage
COPY --from=app /app /app

# Define standard environment variables for Next.js production server
ENV NODE_ENV="production" \
    NODE_OPTIONS="--dns-result-order=ipv4first --use-openssl-ca" \
    NODE_EXTRA_CA_CERTS="/etc/ssl/certs/ca-certificates.crt" \
    NEXT_TELEMETRY_DISABLED="1" \
    HOSTNAME="0.0.0.0" \
    PORT="3000"

# --- IMPORTANT ---
# Define required runtime ENV variables as placeholders.
# These MUST be provided when running the container (docker run -e VAR=value)
# General
ENV ACCESS_CODE="" \
    API_KEY_SELECT_MODE="" \
    DEFAULT_AGENT_CONFIG="" \
    SYSTEM_AGENT="" \
    FEATURE_FLAGS="" \
    PROXY_URL="" \
    APP_URL=""
# Database
ENV KEY_VAULTS_SECRET="" \
    DATABASE_DRIVER="node" \
    DATABASE_URL=""
# Next Auth
ENV NEXT_AUTH_SECRET="" \
    NEXT_AUTH_SSO_PROVIDERS="" \
    NEXTAUTH_URL=""
# S3
ENV S3_PUBLIC_DOMAIN="" \
    S3_ACCESS_KEY_ID="" \
    S3_BUCKET="" \
    S3_ENDPOINT="" \
    S3_SECRET_ACCESS_KEY=""
# Add other required ENV VARS for AI providers if needed
# e.g., OPENAI_API_KEY="", MUSIC_API_BASE_URL="", MUSIC_API_KEY="", etc.


WORKDIR /app

# Run as the non-root user 'nextjs' (uid 1001)
# The user/group must exist in the distroless environment copied from base/app stage,
# but scratch doesn't have user management tools. We rely on numeric UID/GID.
USER 1001

# Expose the port the app runs on (defined by PORT env var)
EXPOSE 3000

# Set the entrypoint and default command
ENTRYPOINT ["/bin/node"]
CMD ["/app/startServer.js"]